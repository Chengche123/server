// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: comic.v1.api.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComicDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Title                 string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Direction             int64  `protobuf:"varint,3,opt,name=Direction,proto3" json:"Direction,omitempty"`
	Islong                int64  `protobuf:"varint,4,opt,name=Islong,proto3" json:"Islong,omitempty"`
	Cover                 string `protobuf:"bytes,5,opt,name=Cover,proto3" json:"Cover,omitempty"`
	Description           string `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	LastUpdatetime        int64  `protobuf:"varint,7,opt,name=LastUpdatetime,proto3" json:"LastUpdatetime,omitempty"`
	LastUpdateChapterName string `protobuf:"bytes,8,opt,name=LastUpdateChapterName,proto3" json:"LastUpdateChapterName,omitempty"`
	FirstLetter           string `protobuf:"bytes,9,opt,name=FirstLetter,proto3" json:"FirstLetter,omitempty"`
	ComicPy               string `protobuf:"bytes,10,opt,name=ComicPy,proto3" json:"ComicPy,omitempty"`
	HotNum                int64  `protobuf:"varint,11,opt,name=HotNum,proto3" json:"HotNum,omitempty"`
	HitNum                int64  `protobuf:"varint,12,opt,name=HitNum,proto3" json:"HitNum,omitempty"`
	LastUpdateChapterId   int64  `protobuf:"varint,13,opt,name=LastUpdateChapterId,proto3" json:"LastUpdateChapterId,omitempty"`
	SubscribeNum          int64  `protobuf:"varint,14,opt,name=SubscribeNum,proto3" json:"SubscribeNum,omitempty"`
}

func (x *ComicDetail) Reset() {
	*x = ComicDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComicDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComicDetail) ProtoMessage() {}

func (x *ComicDetail) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComicDetail.ProtoReflect.Descriptor instead.
func (*ComicDetail) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *ComicDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComicDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ComicDetail) GetDirection() int64 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *ComicDetail) GetIslong() int64 {
	if x != nil {
		return x.Islong
	}
	return 0
}

func (x *ComicDetail) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *ComicDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComicDetail) GetLastUpdatetime() int64 {
	if x != nil {
		return x.LastUpdatetime
	}
	return 0
}

func (x *ComicDetail) GetLastUpdateChapterName() string {
	if x != nil {
		return x.LastUpdateChapterName
	}
	return ""
}

func (x *ComicDetail) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *ComicDetail) GetComicPy() string {
	if x != nil {
		return x.ComicPy
	}
	return ""
}

func (x *ComicDetail) GetHotNum() int64 {
	if x != nil {
		return x.HotNum
	}
	return 0
}

func (x *ComicDetail) GetHitNum() int64 {
	if x != nil {
		return x.HitNum
	}
	return 0
}

func (x *ComicDetail) GetLastUpdateChapterId() int64 {
	if x != nil {
		return x.LastUpdateChapterId
	}
	return 0
}

func (x *ComicDetail) GetSubscribeNum() int64 {
	if x != nil {
		return x.SubscribeNum
	}
	return 0
}

type ComicCategoryDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title          string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Authors        string `protobuf:"bytes,3,opt,name=authors,proto3" json:"authors,omitempty"`
	Status         string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Cover          string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	Types          string `protobuf:"bytes,6,opt,name=types,proto3" json:"types,omitempty"`
	LastUpdatetime int64  `protobuf:"varint,7,opt,name=last_updatetime,json=lastUpdatetime,proto3" json:"last_updatetime,omitempty"`
	Num            int64  `protobuf:"varint,8,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *ComicCategoryDetail) Reset() {
	*x = ComicCategoryDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComicCategoryDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComicCategoryDetail) ProtoMessage() {}

func (x *ComicCategoryDetail) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComicCategoryDetail.ProtoReflect.Descriptor instead.
func (*ComicCategoryDetail) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *ComicCategoryDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComicCategoryDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ComicCategoryDetail) GetAuthors() string {
	if x != nil {
		return x.Authors
	}
	return ""
}

func (x *ComicCategoryDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ComicCategoryDetail) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *ComicCategoryDetail) GetTypes() string {
	if x != nil {
		return x.Types
	}
	return ""
}

func (x *ComicCategoryDetail) GetLastUpdatetime() int64 {
	if x != nil {
		return x.LastUpdatetime
	}
	return 0
}

func (x *ComicCategoryDetail) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type ComicCategoryFilterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId   uint32 `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	TagName string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
}

func (x *ComicCategoryFilterItem) Reset() {
	*x = ComicCategoryFilterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComicCategoryFilterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComicCategoryFilterItem) ProtoMessage() {}

func (x *ComicCategoryFilterItem) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComicCategoryFilterItem.ProtoReflect.Descriptor instead.
func (*ComicCategoryFilterItem) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *ComicCategoryFilterItem) GetTagId() uint32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ComicCategoryFilterItem) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type ComicCategoryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string                     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Items []*ComicCategoryFilterItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ComicCategoryFilter) Reset() {
	*x = ComicCategoryFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComicCategoryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComicCategoryFilter) ProtoMessage() {}

func (x *ComicCategoryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComicCategoryFilter.ProtoReflect.Descriptor instead.
func (*ComicCategoryFilter) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *ComicCategoryFilter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ComicCategoryFilter) GetItems() []*ComicCategoryFilterItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ComicSpecial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ShortTitle string `protobuf:"bytes,3,opt,name=short_title,json=shortTitle,proto3" json:"short_title,omitempty"`
	CreateTime int64  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	SmallCover string `protobuf:"bytes,5,opt,name=small_cover,json=smallCover,proto3" json:"small_cover,omitempty"`
	PageType   int64  `protobuf:"varint,6,opt,name=page_type,json=pageType,proto3" json:"page_type,omitempty"`
	Sort       int64  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`
	PageUrl    string `protobuf:"bytes,8,opt,name=page_url,json=pageUrl,proto3" json:"page_url,omitempty"`
}

func (x *ComicSpecial) Reset() {
	*x = ComicSpecial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComicSpecial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComicSpecial) ProtoMessage() {}

func (x *ComicSpecial) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComicSpecial.ProtoReflect.Descriptor instead.
func (*ComicSpecial) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *ComicSpecial) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComicSpecial) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ComicSpecial) GetShortTitle() string {
	if x != nil {
		return x.ShortTitle
	}
	return ""
}

func (x *ComicSpecial) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ComicSpecial) GetSmallCover() string {
	if x != nil {
		return x.SmallCover
	}
	return ""
}

func (x *ComicSpecial) GetPageType() int64 {
	if x != nil {
		return x.PageType
	}
	return 0
}

func (x *ComicSpecial) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ComicSpecial) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

type ListComicDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComicIds []int64 `protobuf:"varint,1,rep,packed,name=comic_ids,json=comicIds,proto3" json:"comic_ids,omitempty"`
}

func (x *ListComicDetailRequest) Reset() {
	*x = ListComicDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicDetailRequest) ProtoMessage() {}

func (x *ListComicDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicDetailRequest.ProtoReflect.Descriptor instead.
func (*ListComicDetailRequest) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListComicDetailRequest) GetComicIds() []int64 {
	if x != nil {
		return x.ComicIds
	}
	return nil
}

type ListComicDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comics []*ComicDetail `protobuf:"bytes,1,rep,name=comics,proto3" json:"comics,omitempty"`
}

func (x *ListComicDetailResponse) Reset() {
	*x = ListComicDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicDetailResponse) ProtoMessage() {}

func (x *ListComicDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicDetailResponse.ProtoReflect.Descriptor instead.
func (*ListComicDetailResponse) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{6}
}

func (x *ListComicDetailResponse) GetComics() []*ComicDetail {
	if x != nil {
		return x.Comics
	}
	return nil
}

type ListComicCategoryDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`  // TODO: 更改为tag_ids
	Sort   int32  `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"` // 0:人气排序 1:更新排序 2:feed
	Limit  int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListComicCategoryDetailRequest) Reset() {
	*x = ListComicCategoryDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicCategoryDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicCategoryDetailRequest) ProtoMessage() {}

func (x *ListComicCategoryDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicCategoryDetailRequest.ProtoReflect.Descriptor instead.
func (*ListComicCategoryDetailRequest) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{7}
}

func (x *ListComicCategoryDetailRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListComicCategoryDetailRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ListComicCategoryDetailRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListComicCategoryDetailRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListComicCategoryDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*ComicCategoryDetail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *ListComicCategoryDetailResponse) Reset() {
	*x = ListComicCategoryDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicCategoryDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicCategoryDetailResponse) ProtoMessage() {}

func (x *ListComicCategoryDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicCategoryDetailResponse.ProtoReflect.Descriptor instead.
func (*ListComicCategoryDetailResponse) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{8}
}

func (x *ListComicCategoryDetailResponse) GetDetails() []*ComicCategoryDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type ListComicCategoryFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListComicCategoryFilterRequest) Reset() {
	*x = ListComicCategoryFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicCategoryFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicCategoryFilterRequest) ProtoMessage() {}

func (x *ListComicCategoryFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicCategoryFilterRequest.ProtoReflect.Descriptor instead.
func (*ListComicCategoryFilterRequest) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{9}
}

type ListComicCategoryFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*ComicCategoryFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListComicCategoryFilterResponse) Reset() {
	*x = ListComicCategoryFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicCategoryFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicCategoryFilterResponse) ProtoMessage() {}

func (x *ListComicCategoryFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicCategoryFilterResponse.ProtoReflect.Descriptor instead.
func (*ListComicCategoryFilterResponse) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{10}
}

func (x *ListComicCategoryFilterResponse) GetFilters() []*ComicCategoryFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListComicSpecialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListComicSpecialRequest) Reset() {
	*x = ListComicSpecialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicSpecialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicSpecialRequest) ProtoMessage() {}

func (x *ListComicSpecialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicSpecialRequest.ProtoReflect.Descriptor instead.
func (*ListComicSpecialRequest) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{11}
}

func (x *ListComicSpecialRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListComicSpecialRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListComicSpecialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 按照专题创建时间降序
	ComicSpecials []*ComicSpecial `protobuf:"bytes,1,rep,name=ComicSpecials,proto3" json:"ComicSpecials,omitempty"`
}

func (x *ListComicSpecialResponse) Reset() {
	*x = ListComicSpecialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicSpecialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicSpecialResponse) ProtoMessage() {}

func (x *ListComicSpecialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicSpecialResponse.ProtoReflect.Descriptor instead.
func (*ListComicSpecialResponse) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{12}
}

func (x *ListComicSpecialResponse) GetComicSpecials() []*ComicSpecial {
	if x != nil {
		return x.ComicSpecials
	}
	return nil
}

type ListCategoryComicDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComicIds []int32 `protobuf:"varint,1,rep,packed,name=comic_ids,json=comicIds,proto3" json:"comic_ids,omitempty"`
}

func (x *ListCategoryComicDetailRequest) Reset() {
	*x = ListCategoryComicDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCategoryComicDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCategoryComicDetailRequest) ProtoMessage() {}

func (x *ListCategoryComicDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCategoryComicDetailRequest.ProtoReflect.Descriptor instead.
func (*ListCategoryComicDetailRequest) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{13}
}

func (x *ListCategoryComicDetailRequest) GetComicIds() []int32 {
	if x != nil {
		return x.ComicIds
	}
	return nil
}

type ListCategoryComicDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comics []*ComicCategoryDetail `protobuf:"bytes,1,rep,name=comics,proto3" json:"comics,omitempty"`
}

func (x *ListCategoryComicDetailResponse) Reset() {
	*x = ListCategoryComicDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCategoryComicDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCategoryComicDetailResponse) ProtoMessage() {}

func (x *ListCategoryComicDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCategoryComicDetailResponse.ProtoReflect.Descriptor instead.
func (*ListCategoryComicDetailResponse) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{14}
}

func (x *ListCategoryComicDetailResponse) GetComics() []*ComicCategoryDetail {
	if x != nil {
		return x.Comics
	}
	return nil
}

type ListComicChapterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComicId int32 `protobuf:"varint,1,opt,name=comic_id,json=comicId,proto3" json:"comic_id,omitempty"`
}

func (x *ListComicChapterRequest) Reset() {
	*x = ListComicChapterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicChapterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicChapterRequest) ProtoMessage() {}

func (x *ListComicChapterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicChapterRequest.ProtoReflect.Descriptor instead.
func (*ListComicChapterRequest) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{15}
}

func (x *ListComicChapterRequest) GetComicId() int32 {
	if x != nil {
		return x.ComicId
	}
	return 0
}

type ChapterDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapterid    int32  `protobuf:"varint,1,opt,name=Chapterid,proto3" json:"Chapterid,omitempty"`
	Chaptertitle string `protobuf:"bytes,2,opt,name=Chaptertitle,proto3" json:"Chaptertitle,omitempty"`
	Updatetime   int32  `protobuf:"varint,3,opt,name=Updatetime,proto3" json:"Updatetime,omitempty"`
	Filesize     int32  `protobuf:"varint,4,opt,name=Filesize,proto3" json:"Filesize,omitempty"`
	Chapterorder int32  `protobuf:"varint,5,opt,name=Chapterorder,proto3" json:"Chapterorder,omitempty"`
	Title        string `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	ComicId      int32  `protobuf:"varint,7,opt,name=ComicId,proto3" json:"ComicId,omitempty"`
	Direction    int32  `protobuf:"varint,8,opt,name=Direction,proto3" json:"Direction,omitempty"`
	PageUrl      string `protobuf:"bytes,9,opt,name=PageUrl,proto3" json:"PageUrl,omitempty"`
	Picnum       int32  `protobuf:"varint,10,opt,name=Picnum,proto3" json:"Picnum,omitempty"`
	CommentCount int32  `protobuf:"varint,11,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`
}

func (x *ChapterDetail) Reset() {
	*x = ChapterDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterDetail) ProtoMessage() {}

func (x *ChapterDetail) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterDetail.ProtoReflect.Descriptor instead.
func (*ChapterDetail) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{16}
}

func (x *ChapterDetail) GetChapterid() int32 {
	if x != nil {
		return x.Chapterid
	}
	return 0
}

func (x *ChapterDetail) GetChaptertitle() string {
	if x != nil {
		return x.Chaptertitle
	}
	return ""
}

func (x *ChapterDetail) GetUpdatetime() int32 {
	if x != nil {
		return x.Updatetime
	}
	return 0
}

func (x *ChapterDetail) GetFilesize() int32 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *ChapterDetail) GetChapterorder() int32 {
	if x != nil {
		return x.Chapterorder
	}
	return 0
}

func (x *ChapterDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChapterDetail) GetComicId() int32 {
	if x != nil {
		return x.ComicId
	}
	return 0
}

func (x *ChapterDetail) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *ChapterDetail) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *ChapterDetail) GetPicnum() int32 {
	if x != nil {
		return x.Picnum
	}
	return 0
}

func (x *ChapterDetail) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

type ListComicChapterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapters []*ChapterDetail `protobuf:"bytes,1,rep,name=chapters,proto3" json:"chapters,omitempty"`
}

func (x *ListComicChapterResponse) Reset() {
	*x = ListComicChapterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comic_v1_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComicChapterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComicChapterResponse) ProtoMessage() {}

func (x *ListComicChapterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comic_v1_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComicChapterResponse.ProtoReflect.Descriptor instead.
func (*ListComicChapterResponse) Descriptor() ([]byte, []int) {
	return file_comic_v1_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListComicChapterResponse) GetChapters() []*ChapterDetail {
	if x != nil {
		return x.Chapters
	}
	return nil
}

var File_comic_v1_api_proto protoreflect.FileDescriptor

var file_comic_v1_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x22, 0xc1,
	0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x49, 0x73, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x50, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x50, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x6f,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x13,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e,
	0x75, 0x6d, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x4b, 0x0a, 0x17, 0x43, 0x6f, 0x6d,
	0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe3, 0x01, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x22, 0x35, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x22, 0x76, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x5a, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x1f, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x58,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x69, 0x63,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x3d, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x73, 0x22, 0x58, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x22, 0x34, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x69, 0x63, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x69, 0x63, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x4f, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x32, 0xec, 0x04, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x56, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x69,
	0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_comic_v1_api_proto_rawDescOnce sync.Once
	file_comic_v1_api_proto_rawDescData = file_comic_v1_api_proto_rawDesc
)

func file_comic_v1_api_proto_rawDescGZIP() []byte {
	file_comic_v1_api_proto_rawDescOnce.Do(func() {
		file_comic_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_comic_v1_api_proto_rawDescData)
	})
	return file_comic_v1_api_proto_rawDescData
}

var file_comic_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_comic_v1_api_proto_goTypes = []interface{}{
	(*ComicDetail)(nil),                     // 0: comic.v1.ComicDetail
	(*ComicCategoryDetail)(nil),             // 1: comic.v1.ComicCategoryDetail
	(*ComicCategoryFilterItem)(nil),         // 2: comic.v1.ComicCategoryFilterItem
	(*ComicCategoryFilter)(nil),             // 3: comic.v1.ComicCategoryFilter
	(*ComicSpecial)(nil),                    // 4: comic.v1.ComicSpecial
	(*ListComicDetailRequest)(nil),          // 5: comic.v1.ListComicDetailRequest
	(*ListComicDetailResponse)(nil),         // 6: comic.v1.ListComicDetailResponse
	(*ListComicCategoryDetailRequest)(nil),  // 7: comic.v1.ListComicCategoryDetailRequest
	(*ListComicCategoryDetailResponse)(nil), // 8: comic.v1.ListComicCategoryDetailResponse
	(*ListComicCategoryFilterRequest)(nil),  // 9: comic.v1.ListComicCategoryFilterRequest
	(*ListComicCategoryFilterResponse)(nil), // 10: comic.v1.ListComicCategoryFilterResponse
	(*ListComicSpecialRequest)(nil),         // 11: comic.v1.ListComicSpecialRequest
	(*ListComicSpecialResponse)(nil),        // 12: comic.v1.ListComicSpecialResponse
	(*ListCategoryComicDetailRequest)(nil),  // 13: comic.v1.ListCategoryComicDetailRequest
	(*ListCategoryComicDetailResponse)(nil), // 14: comic.v1.ListCategoryComicDetailResponse
	(*ListComicChapterRequest)(nil),         // 15: comic.v1.ListComicChapterRequest
	(*ChapterDetail)(nil),                   // 16: comic.v1.ChapterDetail
	(*ListComicChapterResponse)(nil),        // 17: comic.v1.ListComicChapterResponse
}
var file_comic_v1_api_proto_depIdxs = []int32{
	2,  // 0: comic.v1.ComicCategoryFilter.items:type_name -> comic.v1.ComicCategoryFilterItem
	0,  // 1: comic.v1.ListComicDetailResponse.comics:type_name -> comic.v1.ComicDetail
	1,  // 2: comic.v1.ListComicCategoryDetailResponse.details:type_name -> comic.v1.ComicCategoryDetail
	3,  // 3: comic.v1.ListComicCategoryFilterResponse.filters:type_name -> comic.v1.ComicCategoryFilter
	4,  // 4: comic.v1.ListComicSpecialResponse.ComicSpecials:type_name -> comic.v1.ComicSpecial
	1,  // 5: comic.v1.ListCategoryComicDetailResponse.comics:type_name -> comic.v1.ComicCategoryDetail
	16, // 6: comic.v1.ListComicChapterResponse.chapters:type_name -> comic.v1.ChapterDetail
	5,  // 7: comic.v1.ComicService.ListComicDetail:input_type -> comic.v1.ListComicDetailRequest
	13, // 8: comic.v1.ComicService.ListCategoryComicDetail:input_type -> comic.v1.ListCategoryComicDetailRequest
	7,  // 9: comic.v1.ComicService.ListComicCategoryDetail:input_type -> comic.v1.ListComicCategoryDetailRequest
	9,  // 10: comic.v1.ComicService.ListComicCategoryFilter:input_type -> comic.v1.ListComicCategoryFilterRequest
	11, // 11: comic.v1.ComicService.ListComicSpecial:input_type -> comic.v1.ListComicSpecialRequest
	15, // 12: comic.v1.ComicService.ListComicChapter:input_type -> comic.v1.ListComicChapterRequest
	6,  // 13: comic.v1.ComicService.ListComicDetail:output_type -> comic.v1.ListComicDetailResponse
	14, // 14: comic.v1.ComicService.ListCategoryComicDetail:output_type -> comic.v1.ListCategoryComicDetailResponse
	8,  // 15: comic.v1.ComicService.ListComicCategoryDetail:output_type -> comic.v1.ListComicCategoryDetailResponse
	10, // 16: comic.v1.ComicService.ListComicCategoryFilter:output_type -> comic.v1.ListComicCategoryFilterResponse
	12, // 17: comic.v1.ComicService.ListComicSpecial:output_type -> comic.v1.ListComicSpecialResponse
	17, // 18: comic.v1.ComicService.ListComicChapter:output_type -> comic.v1.ListComicChapterResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_comic_v1_api_proto_init() }
func file_comic_v1_api_proto_init() {
	if File_comic_v1_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comic_v1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComicDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComicCategoryDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComicCategoryFilterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComicCategoryFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComicSpecial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicCategoryDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicCategoryDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicCategoryFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicCategoryFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicSpecialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicSpecialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCategoryComicDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCategoryComicDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicChapterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comic_v1_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComicChapterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comic_v1_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comic_v1_api_proto_goTypes,
		DependencyIndexes: file_comic_v1_api_proto_depIdxs,
		MessageInfos:      file_comic_v1_api_proto_msgTypes,
	}.Build()
	File_comic_v1_api_proto = out.File
	file_comic_v1_api_proto_rawDesc = nil
	file_comic_v1_api_proto_goTypes = nil
	file_comic_v1_api_proto_depIdxs = nil
}
